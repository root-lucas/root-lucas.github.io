<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello_title</title>
    <url>/2020/10/25/hello-title/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="必备"><a href="#必备" class="headerlink" title="必备"></a>必备</h2><ul>
<li>node.js</li>
<li>Git</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装全局</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">mkdir hexo &amp; <span class="built_in">cd</span> hexo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化博客</span></span><br><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理文件</span></span><br><span class="line">hexo clean	 	<span class="comment"># 简写 hexo c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">hexo generate	<span class="comment"># 简写 hexo g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行博客</span></span><br><span class="line">hexo server  	<span class="comment"># 简写 hexo s, http://localhost:4000/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建 markdown 文章</span></span><br><span class="line">hexo new <span class="string">&quot;hello&quot;</span>  <span class="comment"># 简写 hexo n &quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">hexo d			<span class="comment"># 需要插件</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>super</category>
      </categories>
      <tags>
        <tag>test1</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>super</title>
    <url>/2020/10/25/super/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="/2020/10/25/super/cool.jpg" alt="super cool"></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/10/25/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hello_title1</title>
    <url>/2020/10/25/window-bu-shu-nginx-he-wamp-fan-xiang-dai-li-shang-xian/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="必备"><a href="#必备" class="headerlink" title="必备"></a>必备</h2><ul>
<li>window 系统</li>
<li>nginx</li>
<li>wamp （自带了mysql，php，apache）</li>
<li>后端启动 node.js 项目，以3000端口为例</li>
</ul>
<p>这是一个前后端分离的项目，开发环境下 vue 使用了代理配置，当然了也要整个项目能在开发环境下成功运行。</p>
<ul>
<li>wamp 部署则把前端项目打包目录 <code>dist</code>里的文件放置<code>www</code>目录</li>
<li>nginx 部署则把打包目录 <code>dist</code>里的文件放置<code>html</code>目录</li>
</ul>
<p><strong>既然要部署上线那么当然的设置vue.config.js的生产环境代理地址了，否则就会报错哦</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">        <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment">//target: &#x27;http://localhost:3000/&#x27;, // 开发环境后端地址</span></span><br><span class="line">            target: <span class="string">&#x27;http://47.113.124.104:3000/&#x27;</span>, <span class="comment">// 生产环境后端地址</span></span><br><span class="line">            changeOrigin: <span class="literal">true</span>, <span class="comment">// 是否跨域</span></span><br><span class="line">            pathRewrite: &#123;</span><br><span class="line">                <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">     &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="一、apache-部署"><a href="#一、apache-部署" class="headerlink" title="一、apache 部署"></a>一、apache 部署</h2><p>安装好确保能正常启动 wamp 服务器，这里主要配置的是 apache 服务。</p>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>打开<code>wamp</code>部署环境的安装目录，查找 apache 服务的<code>httpd.conf</code>配置文件，找到下面三个模块，并将他们的注释去掉（#），表示开启代理服务，否则后面的配置不能成功。</p>
<p>比如我这里的wamp安装在<code>D:\developer\wamp\bin\apache\apache2.4.37\conf\httpd.conf</code>（当然你也可以点击 wamp 服务找到相应服务进入文件），根据你自己安装目录配置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">LoadModule proxy_module modules/mod_proxy.so</span><br><span class="line">LoadModule proxy_ajp_module modules/mod_proxy_ajp.so</span><br><span class="line">LoadModule proxy_http_module modules/mod_proxy_http.so</span><br></pre></td></tr></table></figure>

<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>继续编辑<code>apache</code>服务配置<code>D:\developer\wamp\bin\apache\apache2.4.37\conf\extra\httpd-vhosts.conf </code>文件如下：</p>
<p>修改前：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">  ServerName localhost</span><br><span class="line">  ServerAlias localhost</span><br><span class="line">  DocumentRoot <span class="string">&quot;<span class="variable">$&#123;INSTALL_DIR&#125;</span>/www&quot;</span></span><br><span class="line">  &lt;Directory <span class="string">&quot;<span class="variable">$&#123;INSTALL_DIR&#125;</span>/www/&quot;</span>&gt;</span><br><span class="line">    Options +Indexes +Includes +FollowSymLinks +MultiViews</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Require <span class="built_in">local</span></span><br><span class="line">  &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>修改后：(注意将要下面的注释#后面去掉)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;			<span class="comment"># 端口</span></span><br><span class="line">  ServerName localhost		<span class="comment"># 选填域名或公网IP, 这里是测试环境</span></span><br><span class="line">  ServerAlias localhost</span><br><span class="line">  DocumentRoot <span class="string">&quot;<span class="variable">$&#123;INSTALL_DIR&#125;</span>/www&quot;</span>		<span class="comment"># 访问公网域名则默认指向文件夹,默认会指向 index.html、index.php</span></span><br><span class="line">  &lt;Directory <span class="string">&quot;<span class="variable">$&#123;INSTALL_DIR&#125;</span>/www&quot;</span>&gt;</span><br><span class="line">    Options +Indexes +Includes +FollowSymLinks +MultiViews</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Require <span class="built_in">local</span></span><br><span class="line">  &lt;/Directory&gt;</span><br><span class="line">    ProxyPass /api/ http://后端地址:3000/     		 <span class="comment"># 这里填公网后端地址，api是前端是打包的跨域代理dev的相应值，一定要注意斜杠</span></span><br><span class="line">    ProxyPassReverse /api/ http://后端地址:3000/     <span class="comment"># 目的是告诉服务sh器接收到localhost/api/开头的时候就会去请求后端地址了</span></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>上面相关设置信息可百度查找<code>httpd-vhosts.conf </code>配置属性即可。</p>
<blockquote>
<p>注意，如果你部署项目上线到阿里云，其一定要在阿里云控制面板哪里设置<code>安全组</code>开启相应端口才能正常访问</p>
</blockquote>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>配置完上面后需要校验文件是否正确：<code>D:\developer\wamp\bin\apache\apache2.4.37\bin&gt;httpd -t </code> ，然后把前端项目打包目录 <code>dist</code>里的文件放置<code>www</code>目录，最后重启 <code>wamp</code> 所有服务。然后打开<code>localhost</code>或公网域名即可打开你的网站</p>
<h2 id="二、nginx-部署"><a href="#二、nginx-部署" class="headerlink" title="二、nginx 部署"></a>二、nginx 部署</h2><blockquote>
<p>注意，启动nginx服务器，有可能会出现80端口占用报错，最好关闭上面的wamp服务器。</p>
</blockquote>
<p>下面部署配置 nginx 解析以<code>php</code>网站为主的wordpress项目以及和前后端分离的项目。</p>
<p>首先去 nginx 官网下载 nginx 并对其压缩文件进行解压，无需安装。</p>
<h3 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h3><p>比如我这里解压至<code>C:\Users\Administrator\Downloads\nginx-1.18.0</code>。进入<code>\nginx-1.18.0\conf\nginx.conf</code> 编辑，这里输出 <code>server</code>主要信息：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	<span class="comment"># 第一个服务, 解决前后端分离跨域问题</span></span><br><span class="line">	server &#123;</span><br><span class="line">        listen       80;    <span class="comment"># 注意这个监听端口</span></span><br><span class="line">        server_name  localhost;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#请求链接遇到指定后缀名跳转这里</span></span><br><span class="line">        location ~\.(html|js|css|png|gif)$ &#123;</span><br><span class="line">            root   html;  	<span class="comment"># 请求目录</span></span><br><span class="line">            index  index.html index.htm;  <span class="comment"># 默认页</span></span><br><span class="line">			<span class="comment">#try_files	  $uri $uri/ /index.html</span></span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">		location /api/ &#123;		<span class="comment"># 注意前后都有斜杆号</span></span><br><span class="line">			 proxy_pass http://localhost:3000/;  <span class="comment"># 后端端口,最坑,这里要有斜杠号结尾</span></span><br><span class="line">			 proxy_set_header Host <span class="variable">$host</span>; <span class="comment"># 这里的host其实就是Nginx中的server_name，</span></span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 第二个服务解决nginx下使用wordpress搭建网站产生的php文件解析问题</span></span><br><span class="line">    server &#123;</span><br><span class="line">		listen 8888;  <span class="comment">#注意端口, 去阿里云服务器安全组开启</span></span><br><span class="line">		server_name  localhost;  <span class="comment"># !!! 这里填你的公网域名或IP</span></span><br><span class="line"></span><br><span class="line">		root  /var/www/html/;</span><br><span class="line">		index  index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">		location ~\.php$ &#123;</span><br><span class="line">			 fastcgi_pass   127.0.0.1:9000; <span class="comment"># 这里后面必需使用 php-cgi -b 127.0.0.1:9000 解析,否则 502错误</span></span><br><span class="line">			 fastcgi_index  index.php;</span><br><span class="line">			 fastcgi_param  SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>; <span class="comment">#加了这一项</span></span><br><span class="line">			 include        fastcgi_params;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment"># 由于本人的wordpress装在html的子目录,比如http://域名/wordpress/</span></span><br><span class="line">		<span class="comment"># 下面解决搭建wordpress 网站后打开文章修改链接结构出现的 404 报错问题</span></span><br><span class="line">		location /wordpress/ &#123;</span><br><span class="line">   			 <span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">        			rewrite (.*) /wordpress/index.php;</span><br><span class="line">    		 &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h3><p>注意，如果你的网站是基于php开发的，那么由于 nginx 默认不支持 php 的网站（wamp默认支持），没有上面配置的第二个服务，默认打开网站变成下载<code>.php</code>文件了，很明显这不是我们想要的，即便配置了上面依旧还会报错502，产生原因就是 nginx 服务器不能直接解析 php 文件问题。</p>
<p><strong>解决方法：</strong> 搭建 php 开发环境，然后进入 php 安装目录找到 <code>php-cgi .exe</code>后在 CMD 中执行，<code>php-cgi.exe -b 127.0.0.1:9000</code>。</p>
<p>由于我前面搭建过 wamp 部署服务这里就直接执行了：<code>D:\developer\wamp\bin\php\php7.3.1&gt;php-cgi.exe -b 127.0.0.1:9000</code> ，有了它，你才不会网关502 。</p>
<p>最后将vue打包好的文件（或者 wordpress 文件）放置 <code>html</code>文件夹里，使用 <code>nginx -t</code>测试是否正常通过，然后重启 nginx 即可通过<code>localhost或者公网域名IP</code>进行访问。</p>
]]></content>
      <categories>
        <category>super</category>
      </categories>
      <tags>
        <tag>test1</tag>
      </tags>
  </entry>
  <entry>
    <title>hello_title3</title>
    <url>/2020/10/25/linux-bu-shu-nginx-he-wamp-fan-xiang-dai-li-shang-xian/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="必备"><a href="#必备" class="headerlink" title="必备"></a>必备</h2><ul>
<li>Linux系统，这里我测试的是阿里云ECS的 ubuntu</li>
<li>apache 2 </li>
<li>nginx</li>
</ul>
<h2 id="一、apache-部署"><a href="#一、apache-部署" class="headerlink" title="一、apache 部署"></a>一、apache 部署</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>安装服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get install apache2 <span class="comment"># 部署必备</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目开发必备，安装了等同于 window 下 wamp 服务</span></span><br><span class="line">apt-get install mysql-server</span><br><span class="line">apt-get install mysql-client</span><br><span class="line">apt-get install libmysqlclient-dev  <span class="comment"># 这个可有可无</span></span><br><span class="line">apt-get install php   <span class="comment"># 默认安装最新版</span></span><br><span class="line">apt-get install php-mysql   <span class="comment"># 用户连接数据库，安装完后重启apache2服务</span></span><br><span class="line">apt-get install phpmyadmin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装redis 服务根据项目需求</span></span><br><span class="line">sudo apt-get install redis-server   <span class="comment"># 安装Redis服务器</span></span><br><span class="line">service redis-server restart  </span><br><span class="line">redis-cli   <span class="comment"># 启动服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装node.js环境, (node包含了npm工具)</span></span><br><span class="line">sudo apt-get remove --purge nodejs  <span class="comment"># 干净卸载，如果执行which node找不到就成功了</span></span><br><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.35.3/install.sh | bash <span class="comment"># 会自动自动下载nvm</span></span><br><span class="line">nvm ls-remote  				<span class="comment"># 列出所有node版本</span></span><br><span class="line">nvm install v14.10.0 		<span class="comment"># 安装需求的node.js相应版本</span></span><br><span class="line">nvm use v14.10.0  			<span class="comment"># 使用版本</span></span><br><span class="line">npm install pm2 -g  		<span class="comment"># 进程管理工具, 守护你的node.js项目的运行</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面安装完后先重连一次也可以执行 source ~/.bashrc 或者 source /etc/profile 同步使xshell连远程主机重新加载环境变量</p>
</blockquote>
<p>Linux 和 window 一样都有存放项目上线文件的目录，其默认存在：<code>/var/www/html/</code> 下。</p>
<p>启动服务：<code>service apache2 start</code> 或者 <code>/etc/init.d/apache2 start</code></p>
<p>预览服务页面：<code>http://&lt;你域名或公网IP&gt;</code>即可默认为80端口。</p>
<h3 id="2-使用-phpmyadmin-服务"><a href="#2-使用-phpmyadmin-服务" class="headerlink" title="2. 使用 phpmyadmin 服务"></a>2. 使用 phpmyadmin 服务</h3><p>如果你安装了<code>phpmyadmin</code>服务来进行查看操作 MySQL ， 默认你打开<code>http://&lt;你域名或公网IP&gt;/phpmyadmin/</code>是打不开的。你需要进行以下配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">// 使用 phpmyadmin</span><br><span class="line"><span class="built_in">cd</span> /etc/apache2/sites-enabled</span><br><span class="line">sudo ln -s /etc/phpmyadmin/apache.conf ./phpmyadmin.conf  </span><br><span class="line">sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin  <span class="comment"># 和上面的软连接自己选择一个都可以访问</span></span><br><span class="line">service apache2 restart    <span class="comment"># 重启生效</span></span><br></pre></td></tr></table></figure>

<p><code>http://&lt;你域名或公网IP&gt;/phpmyadmin/ </code>  这里就可以访问使用的<code>phpmyadmin</code>服务了</p>
<blockquote>
<p>将phpmyadmin曝露在外网是十分危险的，慎重</p>
</blockquote>
<h3 id="3-反代理部署项目上线"><a href="#3-反代理部署项目上线" class="headerlink" title="3. 反代理部署项目上线"></a>3. 反代理部署项目上线</h3><p>我这里是一个前后端分离的项目：<code>vue + node.js + koa2 + mysql + redis </code></p>
<p>由于我前端<code>vue.config.js</code>配置了代理解决开发环境的跨域问题，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    publicPath: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        open: <span class="literal">true</span>,</span><br><span class="line">        port:<span class="number">8080</span>,</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">                <span class="comment">// target: &#x27;http://localhost:3000/&#x27;, // 开发环境后端地址</span></span><br><span class="line">                target: <span class="string">&#x27;http://&lt;你域名或公网IP&gt;:3000/&#x27;</span>, <span class="comment">// 生产环境的线上后端地址</span></span><br><span class="line">                changeOrigin: <span class="literal">true</span>, <span class="comment">//允许跨域</span></span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果你在前端项目中通过地址直接读取了后端的静态资源如图片，那么打包前一定要将地址从<code>http://localhost:3000/</code>修改成你的线上地址<code>http://&lt;你域名或公网IP&gt;:3000/</code>，否则上线后你的图片不被加载。</p>
</blockquote>
<p>通过 <code>yarn run build </code>成功编译打包后将其复制到 apache 服务里：<code>cp -R projuctName/dist  /var/www/html/dist</code></p>
<p>如果此时你打开网站：<code>http://&lt;你域名或公网IP&gt;:3000/dist</code> ，发现网站访问步了，请求不到后端资源…………</p>
<p>因为在项目中使用了代理跨域，这里还需要做一些对apache服务做一些相关文件配置才能正常访问。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一步：开启apache的代理功能模块</span></span><br><span class="line">a2enmod proxy proxy_balancer proxy_http  <span class="comment"># a2enmod被apache附带安装了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步：编辑相关文件添加配置(我去掉了大量注释)：vim /etc/apache2/sites-available/000-default.conf</span></span><br><span class="line">&lt;VirtualHost *:80&gt;    <span class="comment"># 监听80端口</span></span><br><span class="line">        ServerAdmin webmaster@localhost</span><br><span class="line">        DocumentRoot /var/www/html   <span class="comment"># 打包项目存放目录，可根据需求修改但不推荐</span></span><br><span class="line"></span><br><span class="line">        ErrorLog <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/error.log</span><br><span class="line">        CustomLog <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/access.log combined</span><br><span class="line">        ProxyRequests Off   <span class="comment"># off为启动代理</span></span><br><span class="line">&lt;Proxy *&gt;</span><br><span class="line">        Require all granted</span><br><span class="line">&lt;/Proxy&gt;</span><br><span class="line">ProxyPass /api/ http://localhost:3000/   <span class="comment"># 代理地址,由于我这里项目都部署在一台云服务器,如果是多台的话请求你的内网后端地址</span></span><br><span class="line">ProxyPassReverse /api/ http://localhost:3000/ <span class="comment"># 代理地址,由于我这里项目都部署在一台云服务器,如果是多台的话请求你的内网后端地址</span></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>修改完配置后：</p>
<p>打开后端node.js项目：yarn run dev （打开了后端端口<code>http://localhost:3000/</code>，注意：阿里云安全组也需要开启3000端口，否则访问失败）</p>
<p>重启服务：<code>service apache2 restart</code></p>
<p>访问地址：<code>http://&lt;你域名或公网IP&gt;:80/phpmyadmin</code>，到此应该能以网页形式访问你的数据库了</p>
<blockquote>
<p>再说一遍注意，如果你请求不到后端的静态资源，很可能是你打包前端项目的时候没把localhost替换成线上地址，造成图片看不到，这个是坑</p>
</blockquote>
<h2 id="二、nginx-部署"><a href="#二、nginx-部署" class="headerlink" title="二、nginx 部署"></a>二、nginx 部署</h2><h3 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>安装服务：<code>apt-get install nginx</code></p>
<p>启动服务：<code>service nginx start</code>  （可能会报错占用端口，关闭前面的apache2服务（<code>service apache2 stop</code>）重启即可）</p>
<p>如果你前面安装apache服务那么你会发现nginx存放项目上线文件的目录，都是默认存在：<code>/var/www/html/</code>目录下。</p>
<h3 id="2-使用-phpmyadmin-服务-1"><a href="#2-使用-phpmyadmin-服务-1" class="headerlink" title="2. 使用 phpmyadmin 服务"></a>2. 使用 phpmyadmin 服务</h3><p>当使用与和前面apache2服务的<code>phpmyadmin </code>相同配置你会发开打开不了 phpmyadmin 服务，那么是因为 phpmyadmin 网站的版本是基于php开发的，nginx默认是用不了了，就算打开<code>.php</code>文件的主页你也会发现是下载文件，原因使nginx并没有将文件解析解析到 php 上，需要依赖 php-fpm 库。</p>
<blockquote>
<p>apache 2自带了解析 php 网站的工具，这点 nginx 需要借助其他工具实现，有点麻烦。</p>
</blockquote>
<p>安装使用解析 php 网站辅助工具：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get install php-fpm php7.4-cgi </span><br><span class="line">service php-fpm restart   <span class="comment"># 开启服务</span></span><br><span class="line">php-cgi -b 127.0.0.1:9000 <span class="comment"># 启动cgi接口服务,不能终止,因为有了它,你才不会报网关502或404</span></span><br></pre></td></tr></table></figure>

<p><strong>编辑文件进行配置：</strong> <code> vim /etc/nginx/nginx.conf</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">	server &#123;</span><br><span class="line">                listen 80;   	<span class="comment"># 开启监听端口</span></span><br><span class="line">                server_name  47.113.124.133;  <span class="comment"># 这里填&lt;你的域名或公网IP&gt;</span></span><br><span class="line"></span><br><span class="line">                root  /var/www/html/;    <span class="comment"># 默认打开目录，可简写为html</span></span><br><span class="line">                index  index.php index.html index.htm;  <span class="comment"># 默认解析文件名</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 1.这里解决php网站打开失败问题(将链接后缀名为php的文件转发到这里)</span></span><br><span class="line">                location ~ \.php$ &#123;</span><br><span class="line">                         fastcgi_pass   127.0.0.1:9000; <span class="comment"># 这里后面必需使用 php-cgi -b 127.0.0.1:9000 解析,否则 502 错误</span></span><br><span class="line">                         fastcgi_index  index.php; </span><br><span class="line">                         fastcgi_param  SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>; <span class="comment">#加了这一项</span></span><br><span class="line">                         include        fastcgi_params;  </span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">#==========================下面你无相关需求的话无需进行配置==============================</span></span><br><span class="line">                <span class="comment"># 由于本人的wordpress装在html的子目录,比如http://域名/wordpress/</span></span><br><span class="line">                <span class="comment"># 2.Nginx 开启url_rewrite解决使用wordpress打开文章出现404问题</span></span><br><span class="line">                location /wordpress/ &#123;</span><br><span class="line">                         <span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">                                rewrite (.*) /wordpress/index.php;</span><br><span class="line">                         &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 3.开启缓存页面加速二次访问(查看 response 返回Cache-Control:时间)</span></span><br><span class="line">                location ~* ^.+\.(ico|gif|jpg|jpeg|png)$ &#123;</span><br><span class="line">                        access_log   off;</span><br><span class="line">                        expires      30d;</span><br><span class="line">                &#125;</span><br><span class="line">                location ~* ^.+\.(css|js|txt|xml|swf|wav)$ &#123;</span><br><span class="line">                        access_log   off;</span><br><span class="line">                        expires      24h;</span><br><span class="line">                &#125;</span><br><span class="line">                location ~* ^.+\.(html|htm)$ &#123;</span><br><span class="line">                         expires      1h;</span><br><span class="line">                &#125;</span><br><span class="line">                location ~* ^.+\.(eot|ttf|otf|woff|svg)$ &#123;</span><br><span class="line">                         access_log   off;</span><br><span class="line">                         expires max;</span><br><span class="line">                &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据我的注释内容根据需求自己选，一般选<code>1.</code>即可实现了解析服务</p>
</blockquote>
<p>重启nginx服务生效：<code>service nginx restart</code></p>
<p>访问地址：<code>http://&lt;你域名或公网IP&gt;:80/phpmyadmin</code>，到此应该能以网页形式访问你的数据库了。</p>
<p>要知道直接将数据库暴漏给外网是很不安全的，可以通过下面禁止访问做基本防御措施。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 禁止外网访问phpmyadmin</span></span><br><span class="line">ocation /phpmyadmin/ &#123;</span><br><span class="line">      <span class="comment"># 子目录内所有都返回404</span></span><br><span class="line">      location ~ .*\.(php)?$ &#123;</span><br><span class="line">             <span class="comment">#deny all;</span></span><br><span class="line">             <span class="built_in">return</span> 404;</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="comment">#deny all; #返回403 Forbidden</span></span><br><span class="line">     <span class="built_in">return</span> 404; <span class="comment"># 返回 404 根据欺骗性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-反代理部署项目上线-1"><a href="#3-反代理部署项目上线-1" class="headerlink" title="3. 反代理部署项目上线"></a>3. 反代理部署项目上线</h3><p>跟前面的apache部署一样的前后端分离项目。这里也是编辑<code> vim /etc/nginx/nginx.conf</code> 配置文件即可实现：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">      server &#123;</span><br><span class="line">                listen 3001;  <span class="comment"># 监听3001端口, 注意也需要你在阿里云安全组开启相关端口</span></span><br><span class="line">                server_name 47.113.124.133;   <span class="comment">#这里必需是自己的域名或公网ip地址</span></span><br><span class="line"></span><br><span class="line">                location / &#123;</span><br><span class="line">                        <span class="comment"># root    /root/test/vue-store/dist/; # 访问 http://47.113.124.133:3001读取的目录</span></span><br><span class="line">                        index   index.html; <span class="comment"># 默认被解析的文件名</span></span><br><span class="line">                &#125;</span><br><span class="line">			</span><br><span class="line">			   <span class="comment"># 前端配置vue.config.js的代理跨域</span></span><br><span class="line">                location /api/ &#123;</span><br><span class="line">                        proxy_pass  http://localhost:3000/; <span class="comment"># 开启后端服务监听的地址端口</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里再说一遍打包前需将开发环境的地址替换为生产环境的地址也就是<strong>你的公网域名和IP地址</strong> ，直接访问后端的类似<code>public/imgs/</code>里的地址也是。</p>
</blockquote>
<p>配置完文件后需重启nginx服务生效：<code>service nginx restart</code></p>
<p>访问地址：<code>http://&lt;你域名或公网IP&gt;:3001/dist</code> 即可访问你的项目，注意端口</p>
<blockquote>
<p>如果出现报错：要么通过<code>chmod</code>修改<code>var/www/html</code>目录用户权限，也可尝试将nginx.conf文件的<code>#user www-data;</code>改为<code> user root;</code>以root权限执行。</p>
</blockquote>
<h3 id="4-我的文件配置"><a href="#4-我的文件配置" class="headerlink" title="4. 我的文件配置"></a>4. 我的文件配置</h3><p>下面贴出本人的nginx配置，你可根据自己需求修改</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user www-data; ################## 这里默认的有时运行不了</span></span><br><span class="line">user root;  <span class="comment"># 运行Nginx服务器用户（组）</span></span><br><span class="line">worker_processes auto; 	<span class="comment"># 开启的进程数。每个Nginx进程平均耗费10M~12M内存</span></span><br><span class="line">pid /run/nginx.pid;     <span class="comment"># 主模块指令，用来指定进程pid的存储文件位置</span></span><br><span class="line">include /etc/nginx/modules-enabled/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">	worker_connections 1024; <span class="comment"># 定义Nginx每个进程的最大连接数</span></span><br><span class="line">	<span class="comment"># multi_accept on;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启目录列表访问,合适下载服务器,默认关闭.</span></span><br><span class="line">    <span class="comment">#autoindex on; # 显示目录</span></span><br><span class="line">    <span class="comment">#autoindex_exact_size on; # 显示文件大小 默认为on,显示出文件的确切大小,单位是bytes 改为off后,显示出文件的大概大小,单位是kB或者MB或者GB</span></span><br><span class="line">    <span class="comment">#autoindex_localtime on; # 显示文件时间 默认为off,显示的文件时间为GMT时间 改为on后,显示的文件时间为文件的服务器时间</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># Basic Settings</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line"></span><br><span class="line">	sendfile on;  <span class="comment"># 开启高效文件传输模式</span></span><br><span class="line">	tcp_nopush on; <span class="comment"># 设置为on用于防止网络阻塞</span></span><br><span class="line">	tcp_nodelay on; <span class="comment"># 设置为on用于防止网络阻塞</span></span><br><span class="line">	keepalive_timeout 65; <span class="comment"># 设置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接；</span></span><br><span class="line">	types_hash_max_size 2048;</span><br><span class="line">	<span class="comment"># server_tokens off;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># server_names_hash_bucket_size 64;</span></span><br><span class="line">	<span class="comment"># server_name_in_redirect off;</span></span><br><span class="line"></span><br><span class="line">	include /etc/nginx/mime.types; </span><br><span class="line">	default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># SSL Settings</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line"></span><br><span class="line">	ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; <span class="comment"># Dropping SSLv3, ref: POODLE</span></span><br><span class="line">	ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># Logging Settings</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line"></span><br><span class="line">	access_log /var/<span class="built_in">log</span>/nginx/access.log;</span><br><span class="line">	error_log /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line"></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># Gzip Settings</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line"></span><br><span class="line">	gzip on; <span class="comment">#启用压缩功能,查看response头是否成功压缩</span></span><br><span class="line"></span><br><span class="line">	gzip_vary on;	<span class="comment"># 在响应消息头中添加 Vary：Accept-Encoding，使代理服务器根据请求头中的 Accept-Encoding 识别是否启用 gzip 压缩</span></span><br><span class="line">	gzip_proxied any; <span class="comment">#默认 off，nginx做为反向代理时启用，用于设置启用或禁用从代理服务器上收到相应内容 gzip 压缩</span></span><br><span class="line">	gzip_comp_level 6; <span class="comment"># 压缩比，压缩级别是 1-9，1 压缩级别最低，9 最高</span></span><br><span class="line">	gzip_buffers 16 8k; <span class="comment"># 获取多少内存用于缓存压缩结果</span></span><br><span class="line">	gzip_http_version 1.1; <span class="comment"># 启用 gzip 所需的 HTTP 最低版本</span></span><br><span class="line">	<span class="comment"># 压缩的 MIME 文件类型</span></span><br><span class="line">	gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript font/ttf font/otf image/svg+xml;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># FastCGI相关参数是为了改善网站的性能：减少资源占用,提高访问速度.下面参数看字面意思都能理解.</span></span><br><span class="line">    fastcgi_connect_timeout 300; <span class="comment">## 链接</span></span><br><span class="line">    fastcgi_send_timeout 300;  <span class="comment">##读取 是指nginx进程向fastcgi进程发送request的整个过程的超时时间</span></span><br><span class="line">    fastcgi_read_timeout 300;  <span class="comment">##发请求 是指fastcgi进程向nginx进程发送response的整个过程的超时时间</span></span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># Virtual Host Configs</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line">	<span class="comment">#include /etc/nginx/sites-enabled/*;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 第一个服务, 解决前后端分离跨域代理问题</span></span><br><span class="line">	server &#123;</span><br><span class="line">		listen 3001;</span><br><span class="line">		server_name 47.113.124.133;</span><br><span class="line"></span><br><span class="line">		location / &#123;</span><br><span class="line">			root	/root/xiaomi/vue-xiaomi/dist/;  <span class="comment"># 这里是自定义vue打包的目录</span></span><br><span class="line">			index   index.html;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment"># 当网站链接匹配到api路径则转发至下面的后端地址</span></span><br><span class="line">		location /api/ &#123;</span><br><span class="line">			<span class="comment">#proxy_pass  http://47.113.124.133:3000/; # 如果在前后端都是本地则填localhost即可，如果是集群则填内网IP</span></span><br><span class="line">			proxy_pass  http://localhost:3000/;</span><br><span class="line">			proxy_set_header Host <span class="variable">$host</span>; <span class="comment"># 表示后端web服务器的域名要与当前配置文件中的域名保持一致。</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 第二个服务解决nginx下使用wordpress搭建网站产生的php文件解析问题</span></span><br><span class="line">	server &#123;</span><br><span class="line">		listen 80;</span><br><span class="line">		server_name  47.113.124.133;</span><br><span class="line">		</span><br><span class="line">		<span class="comment"># 这里必需做注释,否则访问不了 php 的网站</span></span><br><span class="line">         <span class="comment">#location / &#123;</span></span><br><span class="line">                root  /var/www/html/;</span><br><span class="line">                index  index.nginx-debian.html index.html index.php index.htm;</span><br><span class="line">         <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">         location /api/ &#123;</span><br><span class="line">                proxy_pass  http://localhost:3000/;  <span class="comment"># 如果在前后端都是本地则填localhost即可，如果是集群则填内网IP</span></span><br><span class="line">                proxy_set_header Host <span class="variable">$host</span>;  </span><br><span class="line">                <span class="comment">#proxy_set_header  X-Real-IP;  #记录客户端的ip地址 </span></span><br><span class="line">         &#125;</span><br><span class="line">		</span><br><span class="line">		location ~ \.php$ &#123;</span><br><span class="line">			 fastcgi_pass   127.0.0.1:9000; <span class="comment"># 这里后面必需使用 php-cgi -b 127.0.0.1:9000 解析,否则 502错误</span></span><br><span class="line">			 fastcgi_index  index.php;</span><br><span class="line">			 fastcgi_param  SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>; <span class="comment">#加了这一项</span></span><br><span class="line">			 include        fastcgi_params;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment"># 禁止外网直接访问phpmyadmin</span></span><br><span class="line">		location /phpmyadmin/ &#123;</span><br><span class="line">			<span class="comment"># 子目录内所有都返回404</span></span><br><span class="line">    			location ~ .*\.(php)?$ &#123;</span><br><span class="line">    			  <span class="comment">#deny all;</span></span><br><span class="line">    			  <span class="built_in">return</span> 404;</span><br><span class="line">   			&#125;</span><br><span class="line">			<span class="comment">#deny all; #返回403 Forbidden</span></span><br><span class="line">			<span class="built_in">return</span> 404; <span class="comment"># 返回 404 根据欺骗性</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 由于本人的wordpress装在html的子目录,比如http://域名/wordpress/</span></span><br><span class="line">		<span class="comment"># Nginx 开启url_rewrite解决使用wordpress打开文章出现404问题</span></span><br><span class="line">		location /wordpress/ &#123;</span><br><span class="line">   			 <span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">        			rewrite (.*) /wordpress/index.php;</span><br><span class="line">    			 &#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 开启缓存页面各种文件(查看response 返回Cache-Control:时间)</span></span><br><span class="line">		location ~* ^.+\.(ico|gif|jpg|jpeg|png)$ &#123; </span><br><span class="line">        		access_log   off; </span><br><span class="line">        		expires      30d;  <span class="comment"># 时长为30天</span></span><br><span class="line">		&#125;</span><br><span class="line">		location ~* ^.+\.(css|js|txt|xml|swf|wav)$ &#123;</span><br><span class="line">			access_log   off;</span><br><span class="line">			expires      24h;</span><br><span class="line">		&#125;</span><br><span class="line">		location ~* ^.+\.(html|htm)$ &#123;</span><br><span class="line">			 expires      1h;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment"># 字体缓存</span></span><br><span class="line">		location ~* ^.+\.(eot|ttf|otf|woff|svg)$ &#123;</span><br><span class="line">			 access_log   off;</span><br><span class="line">			 expires max;</span><br><span class="line">		&#125;	</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line">	<span class="comment">#include /etc/nginx/sites-enabled/*;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#mail &#123;</span></span><br><span class="line"><span class="comment">#	# See sample authentication script at:</span></span><br><span class="line"><span class="comment">#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#	# auth_http localhost/auth.php;</span></span><br><span class="line"><span class="comment">#	# pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;</span></span><br><span class="line"><span class="comment">#	# imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#	server &#123;</span></span><br><span class="line"><span class="comment">#		listen     localhost:110;</span></span><br><span class="line"><span class="comment">#		protocol   pop3;</span></span><br><span class="line"><span class="comment">#		proxy      on;</span></span><br><span class="line"><span class="comment">#	&#125;</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#	server &#123;</span></span><br><span class="line"><span class="comment">#		listen     localhost:143;</span></span><br><span class="line"><span class="comment">#		protocol   imap;</span></span><br><span class="line"><span class="comment">#		proxy      on;</span></span><br><span class="line"><span class="comment">#	&#125;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>俩个服务，不同的访问端口</p>
</blockquote>
]]></content>
      <categories>
        <category>super2</category>
      </categories>
      <tags>
        <tag>test2</tag>
      </tags>
  </entry>
  <entry>
    <title>hello_title2</title>
    <url>/2020/10/25/window-shi-xian-yuan-cheng-fang-wen-ubuntu-zhuo-mian-he-mysql/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>我的阿里云服务：</p>
<p>LSB Version:    core-11.1.0ubuntu2-noarch:security-11.1.0ubuntu2-noarch<br>Distributor ID:    Ubuntu<br>Description:    Ubuntu 20.04.1 LTS<br>Release:        20.04<br>Codename:    focal</p>
<p>我本人系统 windows 10 。</p>
<h2 id="一、远程访问ubuntu图形桌面"><a href="#一、远程访问ubuntu图形桌面" class="headerlink" title="一、远程访问ubuntu图形桌面"></a>一、远程访问ubuntu图形桌面</h2><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><p>在有些场景下，我们可能在使用阿里云linux系统的服务器的时候想设置一些系统相关的配置，但是自己经常会忘记命令且有些情况下远远没有直接操作图形界面来实现的方便，那么通过远程桌面的方式来实现对服务器间的访问就很有必要了。</p>
<p>以前我们用的都是在通过SSH服务连接，局限于仅能使用文字的终端，其操作很简单，这里不做介绍，在window系统通过远程访问ubuntu桌面图形的方式主要有俩种：</p>
<ul>
<li>通过 xrdp 服务</li>
<li>VNC 方式</li>
</ul>
<p>本文我主要介绍通过xrdp连接服务器。</p>
<h3 id="2-必备条件"><a href="#2-必备条件" class="headerlink" title="2. 必备条件"></a>2. 必备条件</h3><p>（1）阿里云安全组上开启 3389 端口，详细请跳转百度百度。</p>
<p>（2）关闭系统防火墙，或者使用防火墙设置允许3389端口通过</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙,我的阿里云系统, 默认没有安装iptables,倒是自带了命令更简单ufw防火墙</span></span><br><span class="line">sudo service ufw stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许从任何地方访问（因为安全原因，极度不鼓励这样做）</span></span><br><span class="line">sudo ufw allow 3389/tcp </span><br><span class="line"></span><br><span class="line"><span class="comment"># 想要允许对于 Xrdp 服务器的来自于某个 IP 地址或者某个 IP 范围的访问</span></span><br><span class="line">sudo ufw allow from 192.168.1.0/24 to any port 3389</span><br></pre></td></tr></table></figure>

<p>（3）安装最新源</p>
<p>编辑 <code>vim /etc/apt/sources.list</code> 添加镜像，如<a href="https://developer.aliyun.com/mirror/">阿里云官方镜像站</a>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新软件列表</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="comment"># 更新升级已安装的软件</span></span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

<h3 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3. 安装依赖"></a>3. 安装依赖</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装xrdp服务,其提供的远程计算机的图形登录,接受来自各种客户端远程桌面控制的连接</span></span><br><span class="line">sudo apt-get install xrdp</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh 连接必备</span></span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装桌面环境,用于显示桌面各种文件图形的(下面安装一个即可, 本人安装的是Xfce桌面环境)</span></span><br><span class="line">sudo apt-get install ubuntu-desktop  <span class="comment"># 使用Gnome桌面环境,也称为标准版</span></span><br><span class="line">sudo apt-get install xubuntu-desktop <span class="comment"># 使用Xfce桌面环境,比标准版资源占用率低一些</span></span><br></pre></td></tr></table></figure>

<p>安装完后编辑<code>vim /etc/xrdp/startwm.sh</code> ，在<code>/etc/X11/Xsession</code> 前一行插入<code>xfce4-session</code>。</p>
<blockquote>
<p>下面显示文件部分配置</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -r /etc/profile; <span class="keyword">then</span></span><br><span class="line">        . /etc/profile</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">xfce4-session	<span class="comment">####### 插入这行字（如果不插入则登录成功后会出现闪退）	</span></span><br><span class="line"><span class="built_in">test</span> -x /etc/X11/Xsession &amp;&amp; <span class="built_in">exec</span> /etc/X11/Xsession</span><br><span class="line"><span class="built_in">exec</span> /bin/sh /etc/X11/Xsession</span><br></pre></td></tr></table></figure>

<p>重启服务生效：<code>service xrdp restart</code>    </p>
<blockquote>
<p>如果报错试试看执行<code>echo &quot;xfce4-session&quot; &gt;~/.xsession</code></p>
</blockquote>
<h3 id="4-连接"><a href="#4-连接" class="headerlink" title="4. 连接"></a>4. 连接</h3><p>我的电脑 window 10 系统，直接 <code>Alt + R </code>运行 <code>mstsc</code> 命令调出系统自带的远程桌面工具，输入你的阿里云服务器 ip 地址进行连接，进去访问界面， session中选择xorg，使用阿里云的账号密码登录即可访问桌面。</p>
<blockquote>
<p>如果你是Linux系统用户想连接另一个Linux系统或者Window系统，实现远程连接图形界面，你可以尝试使用Remmina 或者 Vinagre。</p>
</blockquote>
<h2 id="二、远程访问MySQL数据库"><a href="#二、远程访问MySQL数据库" class="headerlink" title="二、远程访问MySQL数据库"></a>二、远程访问MySQL数据库</h2><h3 id="1-前言-1"><a href="#1-前言-1" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>虽然可以通过使用ssh终端连接去访问阿里云的mysql数据库，但是总是不那么方便，毕竟命令繁杂，也没必要刻意去记住，当然，你可以通过在阿里云开启apache2 服务配置通过web页面方式<code>phpmyadmin</code>来访问数据库，但是有时速度感人，还不如本地电脑安装个navicat 方便。</p>
<p>我在网上看了很多篇关于远程访问云服务器Mysql的方式，但是自己测试都没有通过，后面我来说说我的解决方法。</p>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认安装最新版8.xx版本,我的版本8.0.21</span></span><br><span class="line">sudo apt-get install mysql-server <span class="comment"># 安装过程根据提示为MySQL设置root用户的密码</span></span><br><span class="line">sudo apt-get install mysql-client</span><br><span class="line">service mysql start </span><br></pre></td></tr></table></figure>

<blockquote>
<p>下面的版本以8.0版本的mysql语法操作和低版本的语法不同</p>
</blockquote>
<h3 id="3-配置远程访问权限"><a href="#3-配置远程访问权限" class="headerlink" title="3. 配置远程访问权限"></a>3. 配置远程访问权限</h3><p>进入mysql数据库：<code>mysql -u root -p</code> 输入你之前安装配置的密码：</p>
<p>下面是数据库语法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最好不要使用 root 用户去远程访问, 为了避免报错最好新建一个用户</span></span><br><span class="line">use mysql;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户名为lucas密码为123456, 但默认没有任何数据库权限的</span></span><br><span class="line">create user lucas identified by <span class="string">&#x27;123456&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前mysql所有用户</span></span><br><span class="line">select host, user, plugin from user; </span><br><span class="line"></span><br><span class="line"> <span class="comment"># 授予lucas用户权限 </span></span><br><span class="line">grant insert,select,update on test01.* to <span class="string">&#x27;lucas&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;  <span class="comment"># 对test01数据库&quot;增查更新&quot;</span></span><br><span class="line">grant all privileges on *.* to <span class="string">&#x27;lucas&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;  <span class="comment"># 授权所有数据库最大权限, 但无授权其他用户的权限</span></span><br><span class="line">revoke all privileges on *.* from <span class="string">&#x27;lucas&#x27;</span>@<span class="string">&#x27;%&#x27;</span>; <span class="comment"># 撤销权限的方法</span></span><br><span class="line"></span><br><span class="line">flush privileges;  <span class="comment"># 刷新权限</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出</span></span><br></pre></td></tr></table></figure>

<p>做完上面，就尝试使用navicat可能连接不上，会报错。</p>
<p>之前看了很多篇文章都说编辑<code>/etc/my.cnf</code>文件，但我这安装的mysql版本在相应目录没有这个文件，网上查了查终于找到了解决方法。</p>
<p>编辑：<code>vim /etc/mysql/mysql.conf.d/mysqld.cnf</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到</span></span><br><span class="line">bind-address  = 127.0.0.1</span><br><span class="line"><span class="comment"># 改为</span></span><br><span class="line">bind-address  = 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到[mysqld]下的</span></span><br><span class="line">user = mysql </span><br><span class="line"><span class="comment"># 改为</span></span><br><span class="line">user = root</span><br><span class="line"><span class="comment"># 端口去掉注释</span></span><br></pre></td></tr></table></figure>

<h3 id="4-连接-1"><a href="#4-连接-1" class="headerlink" title="4. 连接"></a>4. 连接</h3><p>注意先在阿里云安全组配置以及防火墙设置允许3306端口。</p>
<p>我的window 10打开<code>navicat premium 15.0.12</code>版本，选择<code>文件 ——&gt; 新建连接 ——&gt;mysql</code> 输入阿里云服务器IP地址和前面配置的数据库用户密码登录即可。</p>
<p>另一种通过终端访问方式：<code>mysql -h 远程ip地址 -u lucas -p -P 3306 </code></p>
<p>本人遇到一个坑，mysql 8.0版本默认对数据表区分大小写，这点和window版本的不一样，所以有时候你将window测试的后端项目放到linux去执行有可能会报错。</p>
<p><strong>解决方法：</strong> 修改my.cnf，然后初始化数据库（所有数据会被清除，建议先备份）才会生效。</p>
]]></content>
      <categories>
        <category>super</category>
      </categories>
      <tags>
        <tag>test1</tag>
      </tags>
  </entry>
</search>
